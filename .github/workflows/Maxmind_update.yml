name: Fetch MaxMind Databases Daily

on:
  schedule:
    - cron: '0 2 * * *'  # Runs daily at 02:00 UTC
  workflow_dispatch:  # Allows manual trigger from GitHub Actions UI

jobs:
  update-geoip:
    runs-on: ubuntu-latest
    environment: maxmind  # Ensures secrets are loaded from the "maxmind" environment

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: pip install requests  

      - name: Debug Secrets (Check If They Exist)
        run: |
          [[ -z "${{ secrets.MAXMIND_LICENSE_KEY }}" ]] && echo "❌ MAXMIND_LICENSE_KEY is missing!" || echo "✅ MAXMIND_LICENSE_KEY is set"
          [[ -z "${{ secrets.MAXMIND_ACCOUNT_ID }}" ]] && echo "❌ MAXMIND_ACCOUNT_ID is missing!" || echo "✅ MAXMIND_ACCOUNT_ID is set"

      - name: Run Fetch Script
        working-directory: Lists/ASNs/correlation_maxmind_geo_db/
        env:
          MAXMIND_LICENSE_KEY: ${{ secrets.MAXMIND_LICENSE_KEY }}
          MAXMIND_ACCOUNT_ID: ${{ secrets.MAXMIND_ACCOUNT_ID }}
        run: |
          echo "🚀 Running fetch_maxmind_databases_daily.py..."
          python fetch_maxmind_databases_daily.py || echo "❌ Script failed! Check logs."

      - name: List Generated Files
        run: |
          echo "🚀 Checking modified files..."
          find Lists/ASNs/correlation_maxmind_geo_db/maxmind_databases/ -type f -exec ls -lh {} +

      - name: Get Latest Release ID
        id: get_release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{owner}/{repo}/releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Release ID
        id: extract_release_id
        run: |
          RELEASE_ID=$(echo '${{ steps.get_release.outputs.data }}' | jq -r '.[] | select(.name=="big files") | .id' | head -n 1)
          if [ -z "$RELEASE_ID" ]; then
            echo "No existing release found, creating a new one..."
            echo "release_exists=false" >> $GITHUB_ENV
          else
            echo "Existing release found: $RELEASE_ID"
            echo "release_id=$RELEASE_ID" >> $GITHUB_ENV
            echo "release_exists=true" >> $GITHUB_ENV
          fi

      - name: Create Release if Not Exists
        if: env.release_exists == 'false'
        id: create_release
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{owner}/{repo}/releases
          name: "big files"
          tag_name: "big-files"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Created Release ID
        if: env.release_exists == 'false'
        run: |
          RELEASE_ID=$(echo '${{ steps.create_release.outputs.data }}' | jq -r '.id')
          echo "release_id=$RELEASE_ID" >> $GITHUB_ENV

      - name: Upload Files to Release
        run: |
          for file in Lists/ASNs/correlation_maxmind_geo_db/maxmind_databases/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file..."
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: $(file --mime-type -b "$file")" \
                --data-binary @"$file" \
                "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.release_id }}/assets?name=$(basename "$file")"
            fi
          done

      - name: Generate Release Link
        run: |
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/big-files"
          echo $RELEASE_URL > Lists/ASNs/correlation_maxmind_geo_db/maxmind_databases/maxmind_databases.link
          cat Lists/ASNs/correlation_maxmind_geo_db/maxmind_databases/maxmind_databases.link
