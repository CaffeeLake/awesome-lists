name: VPN Combine ALL IP address

on:
  schedule:
    - cron: '0 */2 * * *'  # Runs every 2 hours
  workflow_dispatch:

jobs:
  process-data:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: pip install pandas requests

      - name: Run the script to generate the VPN IP list
        working-directory: Lists/VPN
        run: python create_all_vpn_ip_list.py

      - name: List generated files
        run: ls -lah Lists/VPN/

      - name: Get Latest Release ID
        id: get_release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{owner}/{repo}/releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Release ID
        id: extract_release_id
        run: |
          RELEASE_ID=$(echo '${{ steps.get_release.outputs.data }}' | jq -r '.[] | select(.name=="big files") | .id' | head -n 1)
          if [ -z "$RELEASE_ID" ]; then
            echo "No existing release found, creating a new one..."
            echo "release_exists=false" >> $GITHUB_ENV
          else
            echo "Existing release found: $RELEASE_ID"
            echo "release_id=$RELEASE_ID" >> $GITHUB_ENV
            echo "release_exists=true" >> $GITHUB_ENV
          fi

      - name: Create Release if Not Exists
        if: env.release_exists == 'false'
        id: create_release
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{owner}/{repo}/releases
          name: "big files"
          tag_name: "big-files"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Created Release ID
        if: env.release_exists == 'false'
        run: |
          RELEASE_ID=$(echo '${{ steps.create_release.outputs.data }}' | jq -r '.id')
          echo "release_id=$RELEASE_ID" >> $GITHUB_ENV

      - name: Upload File to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.release_id }}/assets?name=VPN_ALL_IP_List.csv
          asset_path: Lists/VPN/VPN_ALL_IP_List.csv
          asset_content_type: text/csv
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Release Link
        run: |
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/big-files"
          echo $RELEASE_URL > Lists/VPN/VPN_ALL_IP_List.link
          cat Lists/VPN/VPN_ALL_IP_List.link
